<!-- livebook:{"persist_outputs":true} -->

# Contract

```elixir
exfacto_root = Path.join(__DIR__, "..")

Mix.install(
  [
    {:exfacto, path: exfacto_root, env: :dev}
  ],
  config_path: Path.join(exfacto_root, "config/config.exs"),
  lockfile: Path.join(exfacto_root, "mix.lock")
)
```

<!-- livebook:{"output":true} -->

```
==> exfacto
Compiling 1 file (.ex)
warning: variable "accept_funding_pubkey" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/gambler.ex:200: ExFacto.Gambler.accepter_sign_funding_tx/5

warning: variable "fully_signed_funding_tx" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/gambler.ex:202: ExFacto.Gambler.accepter_sign_funding_tx/5

warning: variable "offer_funding_pubkey" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/gambler.ex:200: ExFacto.Gambler.accepter_sign_funding_tx/5

warning: variable "offer_funding_signature" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/gambler.ex:200: ExFacto.Gambler.accepter_sign_funding_tx/5

```

<!-- livebook:{"output":true} -->

```
:ok
```

## Imports & Constants

```elixir
alias ExFacto.{Gambler, Oracle, Event, Contract, Messaging, Utils, Builder}
alias ExFacto.Oracle.{Announcement, Attestation}
alias ExFacto.Contract.{Offer, Accept}
alias Bitcoinex.{Transaction, Script}
alias Bitcoinex.Secp256k1.{PrivateKey, Point, Signature, Schnorr}

network = :testnet
p2tr_keyspend_witness_len = 64
default_sequence = 0xFFFFFFFE

new_p2tr_keyonly = fn ->
  sk = Utils.new_private_key()
  pk = PrivateKey.to_point(sk)

  {:ok, p2tr_script} = Script.create_p2tr(pk)
  {sk, p2tr_script}
end

fake_tx = fn out ->
  %Transaction{
    version: 2,
    inputs: [
      %Transaction.In{
        prev_txid: "bcda2fe66ca90e922c3679b224b7b38e34660049a597a8193b850e951c90b268",
        prev_vout: 0,
        sequence_no: default_sequence,
        script_sig: ""
      }
    ],
    outputs: [out],
    lock_time: 0
  }
end
```

<!-- livebook:{"output":true} -->

```
#Function<42.3316493/1 in :erl_eval.expr/6>
```

## Set Up Oracle

```elixir
oracle = Oracle.new()
```

<!-- livebook:{"output":true} -->

```
%ExFacto.Oracle{
  sk: %Bitcoinex.Secp256k1.PrivateKey{
    d: 41517770347379707447018678463658871184240225040225240420305486287035665169740
  },
  pk: %Bitcoinex.Secp256k1.Point{
    x: 90394080248216755336278589138434108617948471155360081382669869140596986363036,
    y: 101474560319959597992285788353007897145330334507718858322618522004866641165264,
    z: 0
  }
}
```

## Setup Event

```elixir
outcomes = ["CHIEFS WIN", "EAGLES WIN"]
event_descriptor = %{outcomes: outcomes}

{nonce_sk, event} =
  Event.new_event_from_enum_event_descriptor(
    event_descriptor,
    1_678_498_879,
    &ExFacto.Utils.new_private_key/0
  )
```

<!-- livebook:{"output":true} -->

```
{%Bitcoinex.Secp256k1.PrivateKey{
   d: 3896518685332606276469593048127006647769667669530159676981433147645029338484
 },
 %ExFacto.Event{
   id: "de8a901b458d1504db47fec55f54c5e1328be0a53a9ec6f082e2f001a74791bf",
   nonce_points: [
     %Bitcoinex.Secp256k1.Point{
       x: 111067853723109968862341562502361849308420935890317445403151459456451655546007,
       y: 98219862061597619972871948524344880289430062140482313443135300385384860800316,
       z: 0
     }
   ],
   descriptor: %{outcomes: ["CHIEFS WIN", "EAGLES WIN"]},
   maturity_epoch: 1678498879
 }}
```

Now, the oracle will sign the event for authentication purposes, The signed event is a complete Announcement, which can be broadcast to DLC users.

```elixir
announcement = Oracle.sign_event(oracle, event)
```

<!-- livebook:{"output":true} -->

```
%ExFacto.Oracle.Announcement{
  signature: %Bitcoinex.Secp256k1.Signature{
    r: 74394279223756576794272994696959201136545732660825157347207683579661196532062,
    s: 15088053102944490215898831902819553553708576856562884099012052197723821337344
  },
  public_key: %Bitcoinex.Secp256k1.Point{
    x: 90394080248216755336278589138434108617948471155360081382669869140596986363036,
    y: 101474560319959597992285788353007897145330334507718858322618522004866641165264,
    z: 0
  },
  event: %ExFacto.Event{
    id: "de8a901b458d1504db47fec55f54c5e1328be0a53a9ec6f082e2f001a74791bf",
    nonce_points: [
      %Bitcoinex.Secp256k1.Point{
        x: 111067853723109968862341562502361849308420935890317445403151459456451655546007,
        y: 98219862061597619972871948524344880289430062140482313443135300385384860800316,
        z: 0
      }
    ],
    descriptor: %{outcomes: ["CHIEFS WIN", "EAGLES WIN"]},
    maturity_epoch: 1678498879
  }
}
```

Anyone can verify the signature of this announcement like so

```elixir
Announcement.verify(announcement)
```

<!-- livebook:{"output":true} -->

```
true
```

## Introducing Alice

Meet Alice. she has a coin (from a transaction that we made up). She wants to use this coin to bet on this Oracle Announcement.

```elixir
{alice_input_sk, alice_input_script} = new_p2tr_keyonly.()

alice_input_tx =
  fake_tx.(%Transaction.Out{
    value: 100_000_000,
    script_pub_key: Script.to_hex(alice_input_script)
  })

alice_funding_inputs = [
  Messaging.new_funding_input_info(
    alice_input_tx,
    0,
    default_sequence,
    p2tr_keyspend_witness_len,
    nil,
    100_000_000
  )
]
```

<!-- livebook:{"output":true} -->

```
[
  %{
    amount: 100000000,
    max_witness_len: 64,
    prev_tx: %Bitcoinex.Transaction{
      version: 2,
      inputs: [
        %Bitcoinex.Transaction.In{
          prev_txid: "bcda2fe66ca90e922c3679b224b7b38e34660049a597a8193b850e951c90b268",
          prev_vout: 0,
          script_sig: "",
          sequence_no: 4294967294
        }
      ],
      outputs: [
        %Bitcoinex.Transaction.Out{
          value: 100000000,
          script_pub_key: "512086143e7dcfd988633682be2b71c5f556a9ed930aef8cc1bfaded0eed56215b31"
        }
      ],
      witnesses: nil,
      lock_time: 0
    },
    prev_vout: 0,
    redeem_script: "",
    sequence: 4294967294
  }
]
```

## Alice Makes an Offer

Alice will create an offer using this Event.

```elixir
# we don't care where the money goes after the contract in this example
{_alice_change_sk, alice_change_script} = new_p2tr_keyonly.()
{:ok, alice_change_addr} = Script.to_address(alice_change_script, network)
{_alice_payout_sk, alice_payout_script} = new_p2tr_keyonly.()
{:ok, alice_payout_addr} = Script.to_address(alice_payout_script, network)

# Gambler is instantiated once per contract.
alice =
  Gambler.new(
    alice_funding_inputs,
    alice_change_addr,
    alice_payout_addr,
    &Utils.new_private_key/0
  )
```

<!-- livebook:{"output":true} -->

```
%ExFacto.Gambler{
  network: %Bitcoinex.Network{
    name: :testnet,
    hrp_segwit_prefix: "tb",
    p2pkh_version_decimal_prefix: 111,
    p2sh_version_decimal_prefix: 196
  },
  funding_inputs: [
    %{
      amount: 100000000,
      max_witness_len: 64,
      prev_tx: %Bitcoinex.Transaction{
        version: 2,
        inputs: [
          %Bitcoinex.Transaction.In{
            prev_txid: "bcda2fe66ca90e922c3679b224b7b38e34660049a597a8193b850e951c90b268",
            prev_vout: 0,
            script_sig: "",
            sequence_no: 4294967294
          }
        ],
        outputs: [
          %Bitcoinex.Transaction.Out{
            value: 100000000,
            script_pub_key: "512086143e7dcfd988633682be2b71c5f556a9ed930aef8cc1bfaded0eed56215b31"
          }
        ],
        witnesses: nil,
        lock_time: 0
      },
      prev_vout: 0,
      redeem_script: "",
      sequence: 4294967294
    }
  ],
  fund_sk: %Bitcoinex.Secp256k1.PrivateKey{
    d: 68415209923777931777203004566643605552914882319971151047836778550893745934679
  },
  fund_pk: %Bitcoinex.Secp256k1.Point{
    x: 13046381441185578206173916196553656771870467164262121847591027029131609172334,
    y: 19220529104632635439108914606164677963810106594662176468734601431709699342552,
    z: 0
  },
  change_script: %Bitcoinex.Script{
    items: [
      81,
      32,
      <<3, 147, 139, 165, 52, 158, 91, 119, 2, 23, 7, 49, 251, 30, 210, 60, 208, 255, 97, 219, 39,
        225, 11, 187, 16, 179, 110, 4, 209, 63, 242, 219>>
    ]
  },
  payout_script: %Bitcoinex.Script{
    items: [
      81,
      32,
      <<39, 172, 241, 119, 115, 83, 253, 32, 178, 181, 16, 130, 62, 44, 139, 86, 194, 162, 101, 249,
        203, 42, 16, 233, 167, 108, 250, 85, 140, 148, 157, 33>>
    ]
  }
}
```

Alice sets a few parameters for the bet. She sets the total bet value to 100M sats, decides she will put up 50M sats (making the odds 50/50), and that she will bet on the `EAGLES WIN` outcome. She also sets the fee rate to 2 sats/vByte.

```elixir
total_collateral = 100_000_000
# alice will put up half (.5BBTC)
offer_collateral = 50_000_000
# alice decides she wants to bet on the seoncd outcome "EAGLES WIN"
payouts = [0, 100_000_000]
# refund will become available 1 week after the event maturity
refund_locktime_delta = 1_204_000
# sats/vByte
fee_rate = 2
```

<!-- livebook:{"output":true} -->

```
2
```

Then she creates the offer

```elixir
offer =
  Gambler.create_offer(
    alice,
    announcement,
    payouts,
    offer_collateral,
    total_collateral,
    refund_locktime_delta,
    fee_rate
  )
```

<!-- livebook:{"output":true} -->

```
%ExFacto.Contract.Offer{
  version: 0,
  contract_flags: 0,
  chain_hash: <<0, 0, 0, 0, 9, 51, 234, 1, 173, 14, 233, 132, 32, 151, 121, 186, 174, 195, 206, 217,
    15, 163, 244, 8, 113, 149, 38, 248, 215, 127, 73, 67>>,
  temp_contract_id: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0>>,
  contract_info: %ExFacto.Contract{
    total_collateral: 100000000,
    descriptor: [{"CHIEFS WIN", 0}, {"EAGLES WIN", 100000000}],
    oracle_info: %ExFacto.Oracle.Announcement{
      signature: %Bitcoinex.Secp256k1.Signature{
        r: 74394279223756576794272994696959201136545732660825157347207683579661196532062,
        s: 15088053102944490215898831902819553553708576856562884099012052197723821337344
      },
      public_key: %Bitcoinex.Secp256k1.Point{
        x: 90394080248216755336278589138434108617948471155360081382669869140596986363036,
        y: 101474560319959597992285788353007897145330334507718858322618522004866641165264,
        z: 0
      },
      event: %ExFacto.Event{
        id: "de8a901b458d1504db47fec55f54c5e1328be0a53a9ec6f082e2f001a74791bf",
        nonce_points: [
          %Bitcoinex.Secp256k1.Point{
            x: 111067853723109968862341562502361849308420935890317445403151459456451655546007,
            y: 98219862061597619972871948524344880289430062140482313443135300385384860800316,
            z: 0
          }
        ],
        descriptor: %{outcomes: ["CHIEFS WIN", "EAGLES WIN"]},
        maturity_epoch: 1678498879
      }
    }
  },
  funding_pubkey: %Bitcoinex.Secp256k1.Point{
    x: 13046381441185578206173916196553656771870467164262121847591027029131609172334,
    y: 19220529104632635439108914606164677963810106594662176468734601431709699342552,
    z: 0
  },
  payout_script: %Bitcoinex.Script{
    items: [
      81,
      32,
      <<39, 172, 241, 119, 115, 83, 253, 32, 178, 181, 16, 130, 62, 44, 139, 86, 194, 162, 101, 249,
        203, 42, 16, 233, 167, 108, 250, 85, 140, 148, 157, 33>>
    ]
  },
  collateral_amount: 50000000,
  funding_inputs: [
    %{
      amount: 100000000,
      max_witness_len: 64,
      prev_tx: %Bitcoinex.Transaction{
        version: 2,
        inputs: [
          %Bitcoinex.Transaction.In{
            prev_txid: "bcda2fe66ca90e922c3679b224b7b38e34660049a597a8193b850e951c90b268",
            prev_vout: 0,
            script_sig: "",
            sequence_no: 4294967294
          }
        ],
        outputs: [
          %Bitcoinex.Transaction.Out{
            value: 100000000,
            script_pub_key: "512086143e7dcfd988633682be2b71c5f556a9ed930aef8cc1bfaded0eed56215b31"
          }
        ],
        witnesses: nil,
        lock_time: 0
      },
      prev_vout: 0,
      redeem_script: "",
      sequence: 4294967294
    }
  ],
  change_script: %Bitcoinex.Script{
    items: [
      81,
      32,
      <<3, 147, 139, 165, 52, 158, 91, 119, 2, 23, 7, 49, 251, 30, 210, 60, 208, 255, 97, 219, 39,
        225, 11, 187, 16, 179, 110, 4, 209, 63, 242, 219>>
    ]
  },
  fee_rate: 2,
  cet_locktime: 1678498879,
  refund_locktime: 1679702879,
  tlvs: nil
}
```

This offer can be serialized to base64 and broadcast publically, or shared directly with a counterparty Alice wants to bet against. It is one-time use, since the offer specifies Alice's coins, which cannot be spent more than once.

## Meet Bob

This is Bob. Bob says hi. This is Bob when an offer comes by. Bob also has a coin (also fake), and wants to bet against Alice.

```elixir
{bob_input_sk, bob_input_script} = new_p2tr_keyonly.()

bob_input_tx =
  fake_tx.(%Transaction.Out{
    value: 100_000_000,
    script_pub_key: Script.to_hex(bob_input_script)
  })

bob_funding_inputs = [
  Messaging.new_funding_input_info(
    bob_input_tx,
    0,
    default_sequence,
    p2tr_keyspend_witness_len,
    nil,
    100_000_000
  )
]

# we don't care where the money goes after the contract in this example
{_bob_change_sk, bob_change_script} = new_p2tr_keyonly.()
{:ok, bob_change_addr} = Script.to_address(bob_change_script, network)
{_bob_payout_sk, bob_payout_script} = new_p2tr_keyonly.()
{:ok, bob_payout_addr} = Script.to_address(bob_payout_script, network)

# Gambler is instantiated once per contract.
bob = Gambler.new(bob_funding_inputs, bob_change_addr, bob_payout_addr, &Utils.new_private_key/0)
```

<!-- livebook:{"output":true} -->

```
%ExFacto.Gambler{
  network: %Bitcoinex.Network{
    name: :testnet,
    hrp_segwit_prefix: "tb",
    p2pkh_version_decimal_prefix: 111,
    p2sh_version_decimal_prefix: 196
  },
  funding_inputs: [
    %{
      amount: 100000000,
      max_witness_len: 64,
      prev_tx: %Bitcoinex.Transaction{
        version: 2,
        inputs: [
          %Bitcoinex.Transaction.In{
            prev_txid: "bcda2fe66ca90e922c3679b224b7b38e34660049a597a8193b850e951c90b268",
            prev_vout: 0,
            script_sig: "",
            sequence_no: 4294967294
          }
        ],
        outputs: [
          %Bitcoinex.Transaction.Out{
            value: 100000000,
            script_pub_key: "51200a31874e737159447c69fb284a8cb890533f5cc7096448cc441aa6f2793384e6"
          }
        ],
        witnesses: nil,
        lock_time: 0
      },
      prev_vout: 0,
      redeem_script: "",
      sequence: 4294967294
    }
  ],
  fund_sk: %Bitcoinex.Secp256k1.PrivateKey{
    d: 22794549674217516912617853295861646978498044102180132299109512367178627576041
  },
  fund_pk: %Bitcoinex.Secp256k1.Point{
    x: 112039435473582708901458290925425415208882676393698153661281452299195342881455,
    y: 47847476984214126585697553188068862326082371309665069708919202593013279008408,
    z: 0
  },
  change_script: %Bitcoinex.Script{
    items: [
      81,
      32,
      <<190, 6, 92, 58, 182, 203, 65, 111, 29, 96, 180, 56, 137, 17, 17, 235, 217, 21, 139, 78, 248,
        151, 241, 176, 89, 140, 14, 35, 136, 117, 220, 234>>
    ]
  },
  payout_script: %Bitcoinex.Script{
    items: [
      81,
      32,
      <<214, 239, 31, 160, 153, 152, 35, 1, 93, 149, 173, 160, 195, 196, 166, 44, 54, 83, 123, 247,
        174, 194, 66, 32, 2, 138, 145, 60, 224, 225, 133, 199>>
    ]
  }
}
```

## Bob Accepts Alice's Offer

Alice can send Bob an encoding of her offer, or a coordinator can help Bob find Alice's offer. In either case, Bob will now create an Accept to Alice's Offer.

From the Offer, Bob has all the info he needs to construct the full Funding Tx, CETs for each outcome, and a refund tx.

```elixir
{accept, funding_tx, outcomes_cet_txs, refund_tx} = Gambler.create_accept(bob, offer)
```

<!-- livebook:{"output":true} -->

```
{%ExFacto.Contract.Accept{
   version: 0,
   chain_hash: <<0, 0, 0, 0, 9, 51, 234, 1, 173, 14, 233, 132, 32, 151, 121, 186, 174, 195, 206,
     217, 15, 163, 244, 8, 113, 149, 38, 248, 215, 127, 73, 67>>,
   temp_contract_id: <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0>>,
   funding_pubkey: %Bitcoinex.Secp256k1.Point{
     x: 112039435473582708901458290925425415208882676393698153661281452299195342881455,
     y: 47847476984214126585697553188068862326082371309665069708919202593013279008408,
     z: 0
   },
   payout_script: %Bitcoinex.Script{
     items: [
       81,
       32,
       <<214, 239, 31, 160, 153, 152, 35, 1, 93, 149, 173, 160, 195, 196, 166, 44, 54, 83, 123, 247,
         174, 194, 66, 32, 2, 138, 145, 60, 224, 225, 133, 199>>
     ]
   },
   change_script: %Bitcoinex.Script{
     items: [
       81,
       32,
       <<190, 6, 92, 58, 182, 203, 65, 111, 29, 96, 180, 56, 137, 17, 17, 235, 217, 21, 139, 78,
         248, 151, 241, 176, 89, 140, 14, 35, 136, 117, 220, 234>>
     ]
   },
   collateral_amount: 50000000,
   funding_inputs: [
     %{
       amount: 100000000,
       max_witness_len: 64,
       prev_tx: %Bitcoinex.Transaction{
         version: 2,
         inputs: [
           %Bitcoinex.Transaction.In{
             prev_txid: "bcda2fe66ca90e922c3679b224b7b38e34660049a597a8193b850e951c90b268",
             prev_vout: 0,
             script_sig: "",
             sequence_no: 4294967294
           }
         ],
         outputs: [
           %Bitcoinex.Transaction.Out{
             value: 100000000,
             script_pub_key: "51200a31874e737159447c69fb284a8cb890533f5cc7096448cc441aa6f2793384e6"
           }
         ],
         witnesses: nil,
         lock_time: 0
       },
       prev_vout: 0,
       redeem_script: "",
       sequence: 4294967294
     }
   ],
   cet_adaptor_signatures: [
     {%Bitcoinex.Secp256k1.Signature{
        r: 8452702831967167134703690397529993049769102016778040255098083991433522811449,
        s: 63666919473820067314254645779439296819988898893398369473825423844020090159738
      }, false},
     {%Bitcoinex.Secp256k1.Signature{
        r: 28865194841104661565299824354531180288040977263529974854078615047551017151669,
        s: 46772989195977650514826199438298360424789156412303377065601723456687270232192
      }, false}
   ],
   refund_signature: %Bitcoinex.Secp256k1.Signature{
     r: 3446189794769019937421287423656059447725566735138465699609476512815498798044,
     s: 51700873519172705935495752734112586584693969938438194293647447316060972020934
   },
   dummy_tapkey_tweak: 26818449057611358697594695413520937708107939349737122417988390949518817463526,
   negotiation_fields: nil,
   tlvs: nil
 },
 %Bitcoinex.Transaction{
   version: 2,
   inputs: [
     %Bitcoinex.Transaction.In{
       prev_txid: "70667325da39c7dceeaee87fe66ee0f239e8ec786e97a07664e0c3b4dd33c23e",
       prev_vout: 0,
       script_sig: "",
       sequence_no: 4294967294
     },
     %Bitcoinex.Transaction.In{
       prev_txid: "93afeec43618c56213b8512bc3d49cca2f900f42728cdedb988b93d8b97fdf8f",
       prev_vout: 0,
       script_sig: "",
       sequence_no: 4294967294
     }
   ],
   outputs: [
     %Bitcoinex.Transaction.Out{
       value: 49999490,
       script_pub_key: "512003938ba5349e5b7702170731fb1ed23cd0ff61db27e10bbb10b36e04d13ff2db"
     },
     %Bitcoinex.Transaction.Out{
       value: 49999490,
       script_pub_key: "5120be065c3ab6cb416f1d60b438891111ebd9158b4ef897f1b0598c0e238875dcea"
     },
     %Bitcoinex.Transaction.Out{
       value: 100000512,
       script_pub_key: "512069bc5f62122f97471378efd0000db37cb8629b5b1c7b5e3a1c0529738efc4ac8"
     }
   ],
   witnesses: nil,
   lock_time: 0
 },
 [
   {"CHIEFS WIN",
    %Bitcoinex.Transaction{
      version: 2,
      inputs: [
        %Bitcoinex.Transaction.In{
          prev_txid: "8bee0afb0a08313c8bef39d18512bb4f5c428cc01205008ed4493e8d7b85130b",
          prev_vout: 2,
          script_sig: "",
          sequence_no: 4294967294
        }
      ],
      outputs: [
        %Bitcoinex.Transaction.Out{
          value: 0,
          script_pub_key: "512027acf1777353fd20b2b510823e2c8b56c2a265f9cb2a10e9a76cfa558c949d21"
        },
        %Bitcoinex.Transaction.Out{
          value: 100000000,
          script_pub_key: "5120d6ef1fa0999823015d95ada0c3c4a62c36537bf7aec24220028a913ce0e185c7"
        }
      ],
      witnesses: nil,
      lock_time: 1678498879
    }},
   {"EAGLES WIN",
    %Bitcoinex.Transaction{
      version: 2,
      inputs: [
        %Bitcoinex.Transaction.In{
          prev_txid: "8bee0afb0a08313c8bef39d18512bb4f5c428cc01205008ed4493e8d7b85130b",
          prev_vout: 2,
          script_sig: "",
          sequence_no: 4294967294
        }
      ],
      outputs: [
        %Bitcoinex.Transaction.Out{
          value: 100000000,
          script_pub_key: "512027acf1777353fd20b2b510823e2c8b56c2a265f9cb2a10e9a76cfa558c949d21"
        },
        %Bitcoinex.Transaction.Out{
          value: 0,
          script_pub_key: "5120d6ef1fa0999823015d95ada0c3c4a62c36537bf7aec24220028a913ce0e185c7"
        }
      ],
      witnesses: nil,
      lock_time: 1678498879
    }}
 ],
 %Bitcoinex.Transaction{
   version: 2,
   inputs: [
     %Bitcoinex.Transaction.In{
       prev_txid: "8bee0afb0a08313c8bef39d18512bb4f5c428cc01205008ed4493e8d7b85130b",
       prev_vout: 2,
       script_sig: "",
       sequence_no: 4294967294
     }
   ],
   outputs: [
     %Bitcoinex.Transaction.Out{
       value: 50000000,
       script_pub_key: "5120d6ef1fa0999823015d95ada0c3c4a62c36537bf7aec24220028a913ce0e185c7"
     },
     %Bitcoinex.Transaction.Out{
       value: 50000000,
       script_pub_key: "512027acf1777353fd20b2b510823e2c8b56c2a265f9cb2a10e9a76cfa558c949d21"
     }
   ],
   witnesses: [],
   lock_time: 1679702879
 }}
```

## Alice ACKs the Accept, Signs Funding Transaction

Once Alice receives the Accept message from Bob, she has enough information to sign the funding transaction and encrypted_sign the CETs. She will then send those results back to Bob, who will broadcast the Funding transaction.

Bob gets a free option here (for now). In the future, we will integrate a Barrier Oracle to eliminate this, but that requires another round or synchronous communication.
